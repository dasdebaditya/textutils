{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utpal Das\\\\Desktop\\\\jsx\\\\text-utils\\\\src\\\\Components\\\\About.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function About() {\n  _s();\n\n  const [myStyle, setstyle] = useState({\n    color: 'white',\n    backgroundColor: 'black'\n  });\n  const [btnText, setbtnText] = useState(\"Enable Dark Mode\");\n\n  const toggleColor = () => {\n    if (myStyle.color == 'white') {\n      setstyle({\n        color: 'black',\n        backgroundColor: 'white'\n      });\n      setbtnText(\"Enable Dark Mode\");\n    } else {\n      setstyle({\n        color: 'white',\n        backgroundColor: 'black'\n      });\n      setbtnText(\"Enable Light Mode\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: myStyle,\n      className: \"container my-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: myStyle,\n        className: \"accordion\",\n        id: \"accordionExample\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: myStyle,\n          className: \"accordion-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: myStyle,\n            className: \"accordion-header\",\n            id: \"headingOne\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              style: myStyle,\n              className: \"accordion-button\",\n              type: \"button\",\n              \"data-bs-toggle\": \"collapse\",\n              \"data-bs-target\": \"#collapseOne\",\n              \"aria-expanded\": \"true\",\n              \"aria-controls\": \"collapseOne\",\n              children: \"Accordion Item #1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"collapseOne\",\n            className: \"accordion-collapse collapse show\",\n            \"aria-labelledby\": \"headingOne\",\n            \"data-bs-parent\": \"#accordionExample\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"accordion-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"This is the first item's accordion body.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 15\n              }, this), \" It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \".accordion-body\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 48\n              }, this), \", though the transition does limit overflow.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: myStyle,\n          className: \"accordion-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: myStyle,\n            className: \"accordion-header\",\n            id: \"headingTwo\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              style: myStyle,\n              className: \"accordion-button collapsed\",\n              type: \"button\",\n              \"data-bs-toggle\": \"collapse\",\n              \"data-bs-target\": \"#collapseTwo\",\n              \"aria-expanded\": \"false\",\n              \"aria-controls\": \"collapseTwo\",\n              children: \"Accordion Item #2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"collapseTwo\",\n            className: \"accordion-collapse collapse\",\n            \"aria-labelledby\": \"headingTwo\",\n            \"data-bs-parent\": \"#accordionExample\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"accordion-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"This is the second item's accordion body.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 15\n              }, this), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \".accordion-body\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 48\n              }, this), \", though the transition does limit overflow.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: myStyle,\n          className: \"accordion-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: myStyle,\n            className: \"accordion-header\",\n            id: \"headingThree\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              style: myStyle,\n              className: \"accordion-button collapsed\",\n              type: \"button\",\n              \"data-bs-toggle\": \"collapse\",\n              \"data-bs-target\": \"#collapseThree\",\n              \"aria-expanded\": \"false\",\n              \"aria-controls\": \"collapseThree\",\n              children: \"Accordion Item #3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"collapseThree\",\n            className: \"accordion-collapse collapse\",\n            \"aria-labelledby\": \"headingThree\",\n            \"data-bs-parent\": \"#accordionExample\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"accordion-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"This is the third item's accordion body.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 15\n              }, this), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \".accordion-body\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 48\n              }, this), \", though the transition does limit overflow.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleColor,\n        className: \"btn btn-primary my-3\",\n        children: btnText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(About, \"h4OhjNuOaBIa2al/iCudcUJDPfY=\");\n\n_c = About;\n\nvar _c;\n\n$RefreshReg$(_c, \"About\");","map":{"version":3,"sources":["C:/Users/Utpal Das/Desktop/jsx/text-utils/src/Components/About.js"],"names":["React","useState","About","myStyle","setstyle","color","backgroundColor","btnText","setbtnText","toggleColor"],"mappings":"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","sourcesContent":["import React,{useState} from \"react\";\r\n\r\nexport default function About() {\r\n\r\n  const [myStyle, setstyle] = useState({\r\n    color:'white',\r\n    backgroundColor:'black'\r\n  })\r\n\r\n  const [btnText, setbtnText] = useState(\"Enable Dark Mode\");\r\n\r\n  const toggleColor=()=>{\r\n    if(myStyle.color == 'white'){\r\n      setstyle({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n      })\r\n      setbtnText(\"Enable Dark Mode\");\r\n    }else{\r\n      setstyle({\r\n        color: 'white',\r\n        backgroundColor: 'black'\r\n      })\r\n      setbtnText(\"Enable Light Mode\");\r\n    }\r\n  } \r\n\r\n  return (\r\n\r\n<>\r\n    <div style={myStyle} className=\"container my-5\">\r\n      <div style={myStyle}  className=\"accordion\" id=\"accordionExample\">\r\n        <div style={myStyle}  className=\"accordion-item\">\r\n          <h2 style={myStyle}  className=\"accordion-header\" id=\"headingOne\">\r\n            <button style={myStyle} \r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={myStyle} className=\"accordion-item\">\r\n          <h2 style={myStyle} className=\"accordion-header\" id=\"headingTwo\">\r\n            <button style={myStyle}\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={myStyle} className=\"accordion-item\">\r\n          <h2 style={myStyle} className=\"accordion-header\" id=\"headingThree\">\r\n            <button style={myStyle}\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button onClick={toggleColor} className=\"btn btn-primary my-3\">{btnText}</button>\r\n    </div>\r\n    </>\r\n  );\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module"}